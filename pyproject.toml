[project]
name = "lampe-sdk"
version = "0.2.0"
description = "lampe-sdk will higlight provide feedback on your code base."
readme = "README.md"
author = "antoine@montagne.dev"
requires-python = ">=3.12"
dependencies = [
    "llama-index-core>=0.14.1",
    "llama-index-llms-litellm>=0.6.3",
    "llama-index-workflows>=2.2.0",
    "python-dotenv>=1.1.1",
    "lampe-template",
    "lampe-describe",
    "lampe-cli",
    "cdifflib>=1.2.9",
    "gitpython>=3.1.45",
]

[dependency-groups]
dev = [
    "docformatter>=1.7.5",
    "llama-index-utils-workflow>=0.3.2",
    "mkdocstrings[python]>=0.29.1",
    "mkdocs-material>=9.6.14",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pyright>=1.1.401",
    "ruff>=0.9.10",
    "ipykernel>=6.29.5",
    "python-semantic-release>=10.3.1",
]

[tool.uv.sources]
lampe-template = { workspace = true }
lampe-describe = { workspace = true }
lampe-cli = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

[project.scripts]
core = "lampe.core:main"
template = "lampe.template:main"
lampe = "lampe.cli.entrypoint:main"


[tool.hatch.build.targets.wheel]
packages = ["src/lampe"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.urls]
homepage = "https://github.com/montagne-dev/lampe#readme"
repository = "https://github.com/montagne-dev/lampe"

[tool.ruff]
line-length = 120
exclude = ["*.ipynb"]

lint.select = ["E", "F", "I", "W", "B006"]
lint.ignore = ["E203", "W293"]

[tool.ruff.lint.isort]
known-first-party = ["lampe"]

[tool.pyright]
include = ["src/lampe", "packages/**/src/lampe"]
exclude = [".venv", "**/.venv", "*.ipynb"]
reportGeneralTypeIssues = true
reportOptionalMemberAccess = true
reportMissingModuleSource = false
reportMissingImports = false

[tool.pytest.ini_options]
testpaths = ["tests/", "packages/**/tests/"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "--cov --cov-report=term-missing --cov-fail-under=60 --no-cov-on-fail --import-mode=importlib"
env = ["TELEMTRY_ENABLED=false"]

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:", "def main"]
omit = ["**/test_*.py", "**/__init__.py", "**/conftest.py"]

[tool.semantic_release]
assets = []
build_command = """
# Install uv
curl -LsSf https://astral.sh/uv/install.sh | sh
# Lock dependencies to upgrade to the latest version
$HOME/.local/bin/uv lock
# Add uv.lock to the release commit this is required otherwise the project dependencies will be unsynced
git add uv.lock
"""
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches."test releases"]
match = "test\\/.*"
prerelease_token = "rc"
prerelease = true

[tool.semantic_release.changelog]
template_dir = "docs/templates"
changelog_file = "docs/CHANGELOG.md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = true
lstrip_blocks = true
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = [
    "fix",
    "perf",
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
